{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":208024,"sourceType":"modelInstanceVersion","modelInstanceId":5388,"modelId":3533}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Goal: Program to fetch and summarize the latest AI certification / courses from web and store results in a csv file.","metadata":{}},{"cell_type":"markdown","source":"## Install dependencies ","metadata":{}},{"cell_type":"code","source":"# Install required packages\n!pip install -q -U requests beautifulsoup4 keras-nlp tensorflow transformers\nprint(\"Installation Complete\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-06T16:47:06.667957Z","iopub.execute_input":"2025-03-06T16:47:06.668326Z","iopub.status.idle":"2025-03-06T16:47:27.770438Z","shell.execute_reply.started":"2025-03-06T16:47:06.668286Z","shell.execute_reply":"2025-03-06T16:47:27.768843Z"}},"outputs":[{"name":"stdout","text":"\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.0/44.0 kB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m186.0/186.0 kB\u001b[0m \u001b[31m7.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m704.8/704.8 kB\u001b[0m \u001b[31m23.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m10.0/10.0 MB\u001b[0m \u001b[31m59.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m:01\u001b[0mm\n\u001b[?25hInstallation Complete\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"## Load Libraries","metadata":{}},{"cell_type":"code","source":"import os\nimport re\nimport pandas as pd\nfrom typing import List, Dict, Optional\nimport requests\nfrom bs4 import BeautifulSoup\nimport urllib.parse\nimport google.generativeai as genai\nfrom kaggle_secrets import UserSecretsClient","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-06T16:47:31.445042Z","iopub.execute_input":"2025-03-06T16:47:31.445501Z","iopub.status.idle":"2025-03-06T16:47:35.003117Z","shell.execute_reply.started":"2025-03-06T16:47:31.445467Z","shell.execute_reply":"2025-03-06T16:47:35.001684Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"## AI Search Engine with LLM component for summaization","metadata":{}},{"cell_type":"code","source":"class AICertificationSearch:\n    \"\"\"\n    Comprehensive AI Certification Search and Summarization Engine\n    Using Gemini API for intelligent summarization\n    \"\"\"\n    \n    # CONFIGURATION BLOCK: Easily updatable search and categorization parameters\n    SEARCH_STRATEGIES = [\n        \"certification+course\",\n        \"certification+online+training\", \n        \"certification+program\"\n    ]\n    \n    CERTIFICATION_CATEGORIES = {\n        'Machine Learning': ['machine learning', 'ml', 'deep learning', 'neural network'],\n        'Data Science': ['data science', 'data analyst', 'data engineering', 'big data'],\n        'AI/ML': ['artificial intelligence', 'ai', 'machine learning', 'deep learning'],\n        'Cloud AI': ['cloud', 'aws', 'azure', 'google cloud', 'ai services'],\n        'General Tech': ['technology', 'programming', 'computer science']\n    }\n    \n    def __init__(self):\n        \"\"\"\n        Initialize search engine with Gemini API\n        \"\"\"\n        # Load API key from Kaggle secrets\n        user_secrets = UserSecretsClient()\n        api_key = user_secrets.get_secret(\"GOOGLE_API_KEY\")\n        \n        # Configure Gemini API\n        genai.configure(api_key=api_key)\n        self.model = genai.GenerativeModel('gemini-1.5-pro')\n    \n    def _clean_text(self, text: str) -> str:\n        \"\"\"\n        Text cleaning utility for markdown compatibility\n        \n        :param text: Input text to clean\n        :return: Cleaned text\n        \"\"\"\n        if not text:\n            return \"\"\n        return re.sub(r'\\s+', ' ', text.replace('|', '-')).strip()\n    \n    def _categorize_certification(self, title: str) -> str:\n        \"\"\"\n        Automatically categorize certification\n        \n        :param title: Certification title\n        :return: Categorized domain\n        \"\"\"\n        if not title:\n            return \"Other\"\n            \n        lower_title = title.lower()\n        return next(\n            (category for category, keywords in self.CERTIFICATION_CATEGORIES.items() \n             if any(keyword in lower_title for keyword in keywords)), \n            'Other'\n        )\n    \n    def _summarize_text(self, text: str, max_length: int = 200) -> str:\n        \"\"\"\n        SUMMARIZATION COMPONENT: Generate concise text summary using Gemini\n        \n        :param text: Text to summarize\n        :param max_length: Maximum summary length\n        :return: Generated summary\n        \"\"\"\n        if not text or len(text) < 50:\n            return text\n            \n        try:\n            prompt = f\"\"\"Summarize the following AI certification information concisely, highlighting key points.\n            Keep the summary under {max_length} characters.\n            \n            Text to summarize:\n            {text}\n            \n            Summary:\"\"\"\n            \n            response = self.model.generate_content(prompt)\n            return response.text\n        except Exception as e:\n            print(f\"Summarization Error: {e}\")\n            return \"Could not generate summary\"\n    \n    def _extract_search_results(self, html_content):\n        \"\"\"\n        Extract search results from HTML with multiple fallback selectors\n        \n        :param html_content: HTML content from search page\n        :return: List of extracted results\n        \"\"\"\n        results = []\n        soup = BeautifulSoup(html_content, 'html.parser')\n        \n        # Multiple selector strategies to handle potential HTML changes\n        result_selectors = [\n            'div.result__body', 'div.result', 'div.web-result',\n            'div.g', 'div.tF2Cxc', 'div.yuRUbf'  # Additional selectors\n        ]\n        \n        # Try different selector combinations\n        for result_selector in result_selectors:\n            search_results = soup.select(result_selector)\n            if search_results:\n                for result in search_results[:10]:\n                    try:\n                        # Try multiple potential title/link/snippet selectors\n                        title_element = (\n                            result.find(['h2', 'a', 'h3'], class_=['result__title', 'result-link', 'LC20lb']) or\n                            result.select_one('h2, h3, a.result__a')\n                        )\n                        \n                        link_element = (\n                            result.find(['a'], class_=['result__url', 'result-link']) or\n                            result.select_one('a[href]')\n                        )\n                        \n                        snippet_element = (\n                            result.find(['a', 'div', 'span'], class_=['result__snippet', 'result-snippet', 'VwiC3b']) or\n                            result.select_one('div.s, span.st, div.snippet-content')\n                        )\n                        \n                        if title_element and link_element and snippet_element:\n                            title = title_element.get_text(strip=True)\n                            link = link_element.get('href', '')\n                            snippet = snippet_element.get_text(strip=True)\n                            \n                            if title and link and snippet:\n                                results.append({\n                                    'title': self._clean_text(title),\n                                    'link': link,\n                                    'snippet': snippet\n                                })\n                    except Exception as result_error:\n                        print(f\"Result extraction error: {result_error}\")\n                \n                # If we found results with this selector, stop trying\n                if results:\n                    break\n        \n        return results\n    \n    def search_certifications(self, query: str) -> pd.DataFrame:\n        \"\"\"\n        FUNCTIONAL CORE: Advanced search with multiple strategies\n        \n        :param query: Search query for AI certifications\n        :return: Pandas DataFrame with search results\n        \"\"\"\n        headers = {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n            'Accept-Language': 'en-US,en;q=0.9',\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n            'Referer': 'https://www.google.com/',\n            'DNT': '1'\n        }\n        \n        all_results = []\n        \n        for strategy in self.SEARCH_STRATEGIES:\n            search_url = f\"https://duckduckgo.com/html/?q={urllib.parse.quote(query)}+{strategy}\"\n            \n            try:\n                response = requests.get(search_url, headers=headers, timeout=10)\n                \n                if response.status_code != 200:\n                    print(f\"Search failed for {search_url}: Status {response.status_code}\")\n                    continue\n                \n                results = self._extract_search_results(response.text)\n                all_results.extend(results)\n            \n            except Exception as e:\n                print(f\"Search error: {e}\")\n        \n        # Deduplicate results based on URL\n        unique_results = []\n        seen_urls = set()\n        \n        for result in all_results:\n            if result['link'] not in seen_urls:\n                seen_urls.add(result['link'])\n                \n                # Add category and summary\n                result['category'] = self._categorize_certification(result['title'])\n                result['summary'] = self._summarize_text(result['snippet'])\n                \n                unique_results.append(result)\n        \n        return pd.DataFrame(unique_results)\n\n    def generate_insights(self, results_df):\n        \"\"\"\n        Generate insights about certification landscape using Gemini\n        \n        :param results_df: DataFrame with certification results\n        :return: Textual insights\n        \"\"\"\n        if results_df.empty:\n            return \"No results to analyze\"\n            \n        try:\n            # Convert dataframe to text representation\n            df_text = results_df[['title', 'category', 'summary']].to_string()\n            \n            prompt = f\"\"\"Analyze these AI certification results and provide 3-5 key insights:\n            \n            {df_text}\n            \n            Focus on trends, comparative advantages, target audiences, and qualification value.\n            Keep your analysis concise and actionable.\"\"\"\n            \n            response = self.model.generate_content(prompt)\n            return response.text\n        except Exception as e:\n            print(f\"Insight generation error: {e}\")\n            return \"Could not generate insights\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-06T16:47:41.061292Z","iopub.execute_input":"2025-03-06T16:47:41.061901Z","iopub.status.idle":"2025-03-06T16:47:41.081764Z","shell.execute_reply.started":"2025-03-06T16:47:41.061848Z","shell.execute_reply":"2025-03-06T16:47:41.080081Z"}},"outputs":[],"execution_count":3},{"cell_type":"markdown","source":"## Main Entry","metadata":{}},{"cell_type":"code","source":"def main():\n    \"\"\"\n    Kaggle Notebook Entry Point\n    \"\"\"\n    print(\"Initializing AI Certification Search Engine...\")\n    search_engine = AICertificationSearch()\n    \n    # Interactive search for AI certifications\n    query = input(\"Enter AI Certification Search Query (e.g., 'machine learning', 'data science'): \")\n    print(f\"\\n🔍 Searching for: {query}\")\n    \n    results_df = search_engine.search_certifications(query)\n    \n    if results_df.empty:\n        print(\"No results found. Try a different search query.\")\n        return\n    \n    # Display results\n    print(f\"\\n✅ Found {len(results_df)} certification results:\")\n    \n    # Display main columns for readability\n    display(results_df[['title', 'category', 'summary', 'link']])\n    \n    # Generate insights\n    print(\"\\n🧠 AI-Powered Insights:\")\n    insights = search_engine.generate_insights(results_df)\n    print(insights)\n    \n    # Save to CSV for further analysis\n    filename = f\"{query.replace(' ', '_')}_ai_certifications.csv\"\n    results_df.to_csv(filename, index=False)\n    print(f\"\\n💾 Results saved to: {filename}\")\n\nif __name__ == \"__main__\":\n    main()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-06T16:48:00.885053Z","iopub.execute_input":"2025-03-06T16:48:00.885430Z","iopub.status.idle":"2025-03-06T16:48:22.061048Z","shell.execute_reply.started":"2025-03-06T16:48:00.885399Z","shell.execute_reply":"2025-03-06T16:48:22.059770Z"}},"outputs":[{"name":"stdout","text":"Initializing AI Certification Search Engine...\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"Enter AI Certification Search Query (e.g., 'machine learning', 'data science'):  Machine learning\n"},{"name":"stdout","text":"\n🔍 Searching for: Machine learning\nSearch failed for https://duckduckgo.com/html/?q=Machine%20learning+certification+online+training: Status 202\nSearch failed for https://duckduckgo.com/html/?q=Machine%20learning+certification+program: Status 202\nSummarization Error: 429 Resource has been exhausted (e.g. check quota).\nSummarization Error: 429 Resource has been exhausted (e.g. check quota).\nSummarization Error: 429 Resource has been exhausted (e.g. check quota).\nSummarization Error: 429 Resource has been exhausted (e.g. check quota).\nSummarization Error: 429 Resource has been exhausted (e.g. check quota).\nSummarization Error: 429 Resource has been exhausted (e.g. check quota).\nSummarization Error: 429 Resource has been exhausted (e.g. check quota).\n\n✅ Found 10 certification results:\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"                                               title          category  \\\n0  IBM Machine Learning Professional Certificate ...  Machine Learning   \n1  6 Popular Machine Learning Certifications: You...  Machine Learning   \n2  10 Best Machine Learning Certification for 202...  Machine Learning   \n3  Best Machine Learning Courses & Certificates [...  Machine Learning   \n4  Professional ML Engineer Certification - Learn...  Machine Learning   \n5  A Guide to The Top Machine Learning Certificat...  Machine Learning   \n6  Professional Certificate Program in Machine Le...  Machine Learning   \n7  10 Best Online Courses For Machine Learning in...  Machine Learning   \n8  Machine Learning Course Online - Enroll for ML...  Machine Learning   \n9  10 Best Machine Learning Certifications to Boo...  Machine Learning   \n\n                                             summary  \\\n0  Learn AI/ML skills in under 3 months. Gain in-...   \n1  IBM ML Pro Cert: 6-course online program cover...   \n2  Boost career w/ ML cert. Learn ML basics using...   \n3                         Could not generate summary   \n4                         Could not generate summary   \n5                         Could not generate summary   \n6                         Could not generate summary   \n7                         Could not generate summary   \n8                         Could not generate summary   \n9                         Could not generate summary   \n\n                                                link  \n0  https://www.coursera.org/professional-certific...  \n1  https://www.coursera.org/articles/machine-lear...  \n2  https://hackr.io/blog/machine-learning-certifi...  \n3  https://www.coursera.org/courses?query=machine...  \n4  https://cloud.google.com/learn/certification/m...  \n5  https://www.datacamp.com/blog/top-machine-lear...  \n6  https://professional.mit.edu/course-catalog/pr...  \n7  https://www.geeksforgeeks.org/online-courses-f...  \n8  https://www.simplilearn.com/big-data-and-analy...  \n9  https://www.springboard.com/blog/data-science/...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>category</th>\n      <th>summary</th>\n      <th>link</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>IBM Machine Learning Professional Certificate ...</td>\n      <td>Machine Learning</td>\n      <td>Learn AI/ML skills in under 3 months. Gain in-...</td>\n      <td>https://www.coursera.org/professional-certific...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>6 Popular Machine Learning Certifications: You...</td>\n      <td>Machine Learning</td>\n      <td>IBM ML Pro Cert: 6-course online program cover...</td>\n      <td>https://www.coursera.org/articles/machine-lear...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10 Best Machine Learning Certification for 202...</td>\n      <td>Machine Learning</td>\n      <td>Boost career w/ ML cert. Learn ML basics using...</td>\n      <td>https://hackr.io/blog/machine-learning-certifi...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Best Machine Learning Courses &amp; Certificates [...</td>\n      <td>Machine Learning</td>\n      <td>Could not generate summary</td>\n      <td>https://www.coursera.org/courses?query=machine...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Professional ML Engineer Certification - Learn...</td>\n      <td>Machine Learning</td>\n      <td>Could not generate summary</td>\n      <td>https://cloud.google.com/learn/certification/m...</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>A Guide to The Top Machine Learning Certificat...</td>\n      <td>Machine Learning</td>\n      <td>Could not generate summary</td>\n      <td>https://www.datacamp.com/blog/top-machine-lear...</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Professional Certificate Program in Machine Le...</td>\n      <td>Machine Learning</td>\n      <td>Could not generate summary</td>\n      <td>https://professional.mit.edu/course-catalog/pr...</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>10 Best Online Courses For Machine Learning in...</td>\n      <td>Machine Learning</td>\n      <td>Could not generate summary</td>\n      <td>https://www.geeksforgeeks.org/online-courses-f...</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Machine Learning Course Online - Enroll for ML...</td>\n      <td>Machine Learning</td>\n      <td>Could not generate summary</td>\n      <td>https://www.simplilearn.com/big-data-and-analy...</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10 Best Machine Learning Certifications to Boo...</td>\n      <td>Machine Learning</td>\n      <td>Could not generate summary</td>\n      <td>https://www.springboard.com/blog/data-science/...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"\n🧠 AI-Powered Insights:\nInsight generation error: 429 Resource has been exhausted (e.g. check quota).\nCould not generate insights\n\n💾 Results saved to: Machine_learning_ai_certifications.csv\n","output_type":"stream"}],"execution_count":4}]}