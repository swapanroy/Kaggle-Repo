{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":208024,"sourceType":"modelInstanceVersion","modelInstanceId":5388,"modelId":3533}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Goal: Program to fetch and summarize the latest AI certification / courses from web and store results in a csv file.","metadata":{}},{"cell_type":"markdown","source":"## Install dependencies ","metadata":{}},{"cell_type":"code","source":"# Install required packages\n!pip install -q -U requests beautifulsoup4 keras-nlp tensorflow transformers\nprint(\"Installation Complete\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-06T18:44:39.478772Z","iopub.execute_input":"2025-03-06T18:44:39.479054Z","iopub.status.idle":"2025-03-06T18:44:55.602974Z","shell.execute_reply.started":"2025-03-06T18:44:39.479031Z","shell.execute_reply":"2025-03-06T18:44:55.601707Z"}},"outputs":[{"name":"stdout","text":"\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.0/44.0 kB\u001b[0m \u001b[31m1.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m186.0/186.0 kB\u001b[0m \u001b[31m9.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m704.8/704.8 kB\u001b[0m \u001b[31m28.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m10.0/10.0 MB\u001b[0m \u001b[31m82.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m0:01\u001b[0m\n\u001b[?25hInstallation Complete\n","output_type":"stream"}],"execution_count":2},{"cell_type":"markdown","source":"## Load Libraries","metadata":{}},{"cell_type":"code","source":"import os\nimport re\nimport time\nimport random\nimport pandas as pd\nfrom typing import List, Dict, Optional\nimport requests\nfrom bs4 import BeautifulSoup\nimport urllib.parse\nimport google.generativeai as genai\nfrom kaggle_secrets import UserSecretsClient","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-06T18:54:45.660470Z","iopub.execute_input":"2025-03-06T18:54:45.660753Z","iopub.status.idle":"2025-03-06T18:54:45.665230Z","shell.execute_reply.started":"2025-03-06T18:54:45.660723Z","shell.execute_reply":"2025-03-06T18:54:45.664266Z"}},"outputs":[],"execution_count":9},{"cell_type":"markdown","source":"## AI Search Engine with LLM component for summaization","metadata":{}},{"cell_type":"code","source":"class AICertificationSearch:\n    \"\"\"\n    Comprehensive AI Certification Search and Summarization Engine\n    Using Gemini API for intelligent summarization with enhanced error handling\n    \"\"\"\n    \n    # CONFIGURATION BLOCK: Easily updatable search and categorization parameters\n    SEARCH_STRATEGIES = [\n        \"certification+course\",\n        \"certification+online+training\", \n        \"certification+program\"\n    ]\n    \n    CERTIFICATION_CATEGORIES = {\n        'Machine Learning': ['machine learning', 'ml', 'deep learning', 'neural network'],\n        'Data Science': ['data science', 'data analyst', 'data engineering', 'big data'],\n        'AI/ML': ['artificial intelligence', 'ai', 'machine learning', 'deep learning'],\n        'Cloud AI': ['cloud', 'aws', 'azure', 'google cloud', 'ai services'],\n        'General Tech': ['technology', 'programming', 'computer science']\n    }\n    \n    # Multiple user agents to rotate and avoid being blocked\n    USER_AGENTS = [\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0',\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15'\n    ]\n    \n    # Alternative search engines to try if DuckDuckGo fails\n    SEARCH_ENGINES = [\n        {\n            'name': 'DuckDuckGo',\n            'url': 'https://duckduckgo.com/html/?q={query}',\n            'selectors': ['div.result__body', 'div.result', 'div.web-result']\n        },\n        {\n            'name': 'Qwant',\n            'url': 'https://lite.qwant.com/?q={query}',\n            'selectors': ['div.result', 'div.web-result', 'article.result']\n        },\n         {\n            'name': 'Google',\n            'url': 'https://www.google.com/search?q={query}&lr=&sca_esv=07ed4e611c1941a0&as_qdr=all&source=hp',\n             \n            'selectors': ['div.result', 'div.web-result', 'article.result']\n        }\n    ]\n    \n    def __init__(self, model_name='gemini-1.5-pro', max_retries=3, retry_delay=2):\n        \"\"\"\n        Initialize search engine with Gemini API and enhanced error handling\n        \n        :param model_name: Name of the Gemini model to use\n        :param max_retries: Maximum number of retries for failed requests\n        :param retry_delay: Delay between retries in seconds\n        \"\"\"\n        self.max_retries = max_retries\n        self.retry_delay = retry_delay\n        \n        try:\n            # Load API key from Kaggle secrets\n            user_secrets = UserSecretsClient()\n            api_key = user_secrets.get_secret(\"GOOGLE_API_KEY\")\n            \n            # Configure Gemini API\n            genai.configure(api_key=api_key)\n            \n            # Try to create the model with the specified name\n            try:\n                self.model = genai.GenerativeModel(model_name)\n                print(f\"Successfully initialized {model_name}\")\n            except Exception as model_error:\n                print(f\"Error loading {model_name}: {model_error}\")\n                print(\"Falling back to gemini-1.5-flash...\")\n                self.model = genai.GenerativeModel('gemini-1.5-flash')\n                \n        except Exception as e:\n            print(f\"API initialization error: {e}\")\n            print(\"Running in fallback mode without Gemini API.\")\n            self.model = None\n    \n    def _get_random_user_agent(self):\n        \"\"\"\n        Get a random user agent to avoid detection patterns\n        \n        :return: Random user agent string\n        \"\"\"\n        return random.choice(self.USER_AGENTS)\n    \n    def _clean_text(self, text: str) -> str:\n        \"\"\"\n        Text cleaning utility for markdown compatibility\n        \n        :param text: Input text to clean\n        :return: Cleaned text\n        \"\"\"\n        if not text:\n            return \"\"\n        return re.sub(r'\\s+', ' ', text.replace('|', '-')).strip()\n    \n    def _categorize_certification(self, title: str) -> str:\n        \"\"\"\n        Automatically categorize certification\n        \n        :param title: Certification title\n        :return: Categorized domain\n        \"\"\"\n        if not title:\n            return \"Other\"\n            \n        lower_title = title.lower()\n        return next(\n            (category for category, keywords in self.CERTIFICATION_CATEGORIES.items() \n             if any(keyword in lower_title for keyword in keywords)), \n            'Other'\n        )\n    \n    def _summarize_text(self, text: str, max_length: int = 200) -> str:\n        \"\"\"\n        SUMMARIZATION COMPONENT: Generate concise text summary using Gemini\n        \n        :param text: Text to summarize\n        :param max_length: Maximum summary length\n        :return: Generated summary\n        \"\"\"\n        if not text or len(text) < 50:\n            return text\n            \n        if not self.model:\n            return text[:max_length] + \"...\" if len(text) > max_length else text\n            \n        try:\n            prompt = f\"\"\"Summarize the following AI certification information concisely, highlighting key points.\n            Keep the summary under {max_length} characters.\n            \n            Text to summarize:\n            {text}\n            \n            Summary:\"\"\"\n            \n            for attempt in range(self.max_retries):\n                try:\n                    response = self.model.generate_content(prompt)\n                    return response.text\n                except Exception as e:\n                    if attempt < self.max_retries - 1:\n                        print(f\"Summarization attempt {attempt+1} failed: {e}\")\n                        time.sleep(self.retry_delay)\n                    else:\n                        raise e\n                        \n        except Exception as e:\n            print(f\"Summarization Error: {e}\")\n            # Fallback to simple truncation\n            return text[:max_length] + \"...\" if len(text) > max_length else text\n    \n    def _extract_search_results(self, html_content):\n        \"\"\"\n        Extract search results from HTML with multiple fallback selectors\n        \n        :param html_content: HTML content from search page\n        :return: List of extracted results\n        \"\"\"\n        results = []\n        soup = BeautifulSoup(html_content, 'html.parser')\n        \n        # Multiple selector strategies to handle potential HTML changes\n        result_selectors = [\n            'div.result__body', 'div.result', 'div.web-result',\n            'div.g', 'div.tF2Cxc', 'div.yuRUbf',  # Additional selectors\n            'article.result', 'div.search-result', 'div.serp-item'  # More generic selectors\n        ]\n        \n        # Try different selector combinations\n        for result_selector in result_selectors:\n            search_results = soup.select(result_selector)\n            if search_results:\n                for result in search_results[:10]:\n                    try:\n                        # Try multiple potential title/link/snippet selectors\n                        title_element = (\n                            result.find(['h2', 'a', 'h3'], class_=['result__title', 'result-link', 'LC20lb']) or\n                            result.select_one('h2, h3, a.result__a, .title, .result-title')\n                        )\n                        \n                        link_element = (\n                            result.find(['a'], class_=['result__url', 'result-link']) or\n                            result.select_one('a[href]')\n                        )\n                        \n                        snippet_element = (\n                            result.find(['a', 'div', 'span'], class_=['result__snippet', 'result-snippet', 'VwiC3b']) or\n                            result.select_one('div.s, span.st, div.snippet-content, .description, .snippet')\n                        )\n                        \n                        if title_element and link_element:\n                            title = title_element.get_text(strip=True)\n                            link = link_element.get('href', '')\n                            \n                            # Handle case where snippet might be missing\n                            snippet = \"\"\n                            if snippet_element:\n                                snippet = snippet_element.get_text(strip=True)\n                            \n                            if title and link:\n                                results.append({\n                                    'title': self._clean_text(title),\n                                    'link': link,\n                                    'snippet': self._clean_text(snippet) if snippet else \"No description available\"\n                                })\n                    except Exception as result_error:\n                        print(f\"Result extraction error: {result_error}\")\n                \n                # If we found results with this selector, stop trying\n                if results:\n                    break\n                    \n        # As a fallback, try to find any links with text if no structured results were found\n        if not results:\n            print(\"No structured results found, trying generic link extraction...\")\n            links = soup.find_all('a')\n            for link in links[:15]:  # Limit to first 15 links to avoid navigation and irrelevant links\n                try:\n                    href = link.get('href', '')\n                    text = link.get_text(strip=True)\n                    \n                    # Filter out navigation links and empty links\n                    if (href and text and len(text) > 10 and \n                        not href.startswith('#') and \n                        'login' not in href.lower() and\n                        'settings' not in href.lower()):\n                        \n                        results.append({\n                            'title': self._clean_text(text),\n                            'link': href,\n                            'snippet': \"No description available\"\n                        })\n                except Exception as e:\n                    continue\n        \n        return results\n    \n    def search_certifications(self, query: str) -> pd.DataFrame:\n        \"\"\"\n        FUNCTIONAL CORE: Advanced search with multiple strategies and retry logic\n        \n        :param query: Search query for AI certifications\n        :return: Pandas DataFrame with search results\n        \"\"\"\n        all_results = []\n        \n        for strategy in self.SEARCH_STRATEGIES:\n            full_query = f\"{query} {strategy.replace('+', ' ')}\"\n            print(f\"Searching for: {full_query}\")\n            \n            for engine in self.SEARCH_ENGINES:\n                if len(all_results) >= 15:  # Stop if we already have enough results\n                    break\n                    \n                search_url = engine['url'].format(query=urllib.parse.quote(full_query))\n                \n                # Try multiple times with increasing delays\n                for attempt in range(self.max_retries):\n                    try:\n                        headers = {\n                            'User-Agent': self._get_random_user_agent(),\n                            'Accept-Language': 'en-US,en;q=0.9',\n                            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n                            'Referer': 'https://www.google.com/',\n                            'DNT': '1'\n                        }\n                        \n                        print(f\"Attempting {engine['name']} search (attempt {attempt+1}/{self.max_retries})...\")\n                        response = requests.get(search_url, headers=headers, timeout=15)\n                        \n                        if response.status_code == 200:\n                            results = self._extract_search_results(response.text)\n                            if results:\n                                print(f\"Found {len(results)} results from {engine['name']}\")\n                                all_results.extend(results)\n                                break  # Success, exit retry loop\n                            else:\n                                print(f\"No results extracted from {engine['name']}\")\n                        else:\n                            print(f\"Search failed: Status {response.status_code}\")\n                            \n                        # Only retry if we didn't get results\n                        if attempt < self.max_retries - 1:\n                            delay = self.retry_delay * (attempt + 1)  # Increasing delay\n                            print(f\"Retrying in {delay} seconds...\")\n                            time.sleep(delay)\n                    \n                    except Exception as e:\n                        print(f\"Search error on attempt {attempt+1}: {e}\")\n                        if attempt < self.max_retries - 1:\n                            delay = self.retry_delay * (attempt + 1)\n                            print(f\"Retrying in {delay} seconds...\")\n                            time.sleep(delay)\n        \n        # Create a basic set of results if all searches failed\n        if not all_results:\n            print(\"All searches failed. Creating placeholder results...\")\n            all_results = [\n                {\n                    'title': f\"{query.title()} Professional Certification\",\n                    'link': \"https://www.example.com/placeholder\",\n                    'snippet': \"Unable to retrieve certification details. Please try a different search query or check internet connectivity.\"\n                },\n                {\n                    'title': f\"Learn {query.title()} Online\",\n                    'link': \"https://www.example.com/placeholder2\",\n                    'snippet': \"Online learning platform offering courses and certifications.\"\n                }\n            ]\n        \n        # Deduplicate results based on URL\n        unique_results = []\n        seen_urls = set()\n        \n        for result in all_results:\n            if result['link'] not in seen_urls:\n                seen_urls.add(result['link'])\n                \n                # Add category and summary\n                result['category'] = self._categorize_certification(result['title'])\n                result['summary'] = self._summarize_text(result['snippet'])\n                \n                unique_results.append(result)\n        \n        return pd.DataFrame(unique_results)\n\n    def generate_insights(self, results_df):\n        \"\"\"\n        Generate insights about certification landscape using Gemini\n        \n        :param results_df: DataFrame with certification results\n        :return: Textual insights\n        \"\"\"\n        if results_df.empty:\n            return \"No results to analyze\"\n            \n        if not self.model:\n            return \"Insights generation requires Gemini API access.\"\n            \n        try:\n            # Convert dataframe to text representation\n            df_text = results_df[['title', 'category', 'summary']].to_string()\n            \n            prompt = f\"\"\"Analyze these AI certification results and provide 3-5 key insights:\n            \n            {df_text}\n            \n            Focus on trends, comparative advantages, target audiences, and qualification value.\n            Keep your analysis concise and actionable.\"\"\"\n            \n            for attempt in range(self.max_retries):\n                try:\n                    response = self.model.generate_content(prompt)\n                    return response.text\n                except Exception as e:\n                    if attempt < self.max_retries - 1:\n                        print(f\"Insight generation attempt {attempt+1} failed: {e}\")\n                        time.sleep(self.retry_delay * (attempt + 1))\n                    else:\n                        raise e\n        except Exception as e:\n            print(f\"Insight generation error: {e}\")\n            return \"Could not generate insights. Please check the model access and API key.\"\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-06T22:43:23.329017Z","iopub.execute_input":"2025-03-06T22:43:23.329408Z","iopub.status.idle":"2025-03-06T22:43:23.353652Z","shell.execute_reply.started":"2025-03-06T22:43:23.329380Z","shell.execute_reply":"2025-03-06T22:43:23.352253Z"}},"outputs":[],"execution_count":25},{"cell_type":"markdown","source":"## Main Entry","metadata":{}},{"cell_type":"code","source":"def main():\n    \"\"\"\n    Kaggle Notebook Entry Point with enhanced error handling\n    \"\"\"\n    print(\"=\"*50)\n    print(\" AI Certification Search Engine v2.0 \")\n    print(\"=\"*50)\n    \n    # Allow model selection\n    available_models = [\n        'gemini-1.5-pro',\n        'gemini-1.5-flash',\n        'gemini-1.0-pro'\n    ]\n    \n    print(\"\\nAvailable models:\")\n    for i, model in enumerate(available_models, 1):\n        print(f\"{i}. {model}\")\n    \n    try:\n        model_choice = int(input(\"\\nSelect model number (default: 1): \") or \"1\")\n        if model_choice < 1 or model_choice > len(available_models):\n            print(\"Invalid choice. Using default model.\")\n            model_choice = 1\n    except ValueError:\n        print(\"Invalid input. Using default model.\")\n        model_choice = 1\n    \n    selected_model = available_models[model_choice-1]\n    print(f\"\\nInitializing search engine with {selected_model}...\")\n    \n    # Initialize search engine with error handling\n    try:\n        search_engine = AICertificationSearch(model_name=selected_model)\n    except Exception as init_error:\n        print(f\"Error initializing search engine: {init_error}\")\n        print(\"Trying to continue with limited functionality...\")\n        search_engine = AICertificationSearch(model_name=\"gemini-1.5-flash\")\n    \n    # Interactive search for AI certifications\n    query = input(\"\\nEnter AI Certification Search Query (e.g., 'machine learning', 'data science'): \")\n    if not query:\n        print(\"No search query provided. Using 'AI certification' as default query.\")\n        query = \"AI certification\"\n    \n    print(f\"\\n🔍 Searching for: {query}\")\n    \n    try:\n        # Set a timeout for the entire search operation\n        results_df = search_engine.search_certifications(query)\n        \n        if results_df.empty:\n            print(\"No results found. Try a different search query.\")\n            return\n        \n        # Display results\n        print(f\"\\n✅ Found {len(results_df)} certification results:\")\n        \n        # Display main columns for readability\n        print(\"\\nRESULTS PREVIEW:\")\n        print(\"-\"*80)\n        \n        # Simple display without using display() function\n        for idx, row in results_df.head(5).iterrows():\n            print(f\"{idx+1}. {row['title']} [{row['category']}]\")\n            print(f\"   Summary: {row['summary'][:150]}...\" if len(row['summary']) > 150 else f\"   Summary: {row['summary']}\")\n            print(f\"   Link: {row['link']}\")\n            print(\"-\"*80)\n        \n        # Generate insights if we have results\n        if len(results_df) > 0:\n            print(\"\\n 🧠 AI-Powered Insights:\")\n            insights = search_engine.generate_insights(results_df)\n            print(insights)\n        \n        # Save the raw data in a CSV file for further analysis\n        try:\n            filename = f\"{query.replace(' ', '_')}_ai_certifications.csv\"\n            results_df.to_csv(filename, index=False)\n            print(f\"\\n 💾 Results saved to: {filename}\")\n        except Exception as save_error:\n            print(f\"Error saving results: {save_error}\")\n            print(\"Try accessing the results directly from the DataFrame.\")\n    \n    except Exception as search_error:\n        print(f\"Fatal error during search operation: {search_error}\")\n        print(\"Please try again with a different query or check your internet connection.\")\n\nif __name__ == \"__main__\":\n    try:\n        main()\n    except KeyboardInterrupt:\n        print(\"\\nOperation canceled by user.\")\n    except Exception as e:\n        print(f\"\\nUnexpected error: {e}\")\n        print(\"Please try restarting the notebook.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-06T22:43:27.843802Z","iopub.execute_input":"2025-03-06T22:43:27.844118Z","iopub.status.idle":"2025-03-06T22:44:59.706880Z","shell.execute_reply.started":"2025-03-06T22:43:27.844095Z","shell.execute_reply":"2025-03-06T22:44:59.706130Z"}},"outputs":[{"name":"stdout","text":"==================================================\n AI Certification Search Engine v2.0 \n==================================================\n\nAvailable models:\n1. gemini-1.5-pro\n2. gemini-1.5-flash\n3. gemini-1.0-pro\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"\nSelect model number (default: 1):  1\n"},{"name":"stdout","text":"\nInitializing search engine with gemini-1.5-pro...\nSuccessfully initialized gemini-1.5-pro\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"\nEnter AI Certification Search Query (e.g., 'machine learning', 'data science'):  Free and Paid \n"},{"name":"stdout","text":"\n🔍 Searching for: Free and Paid \nSearching for: Free and Paid  certification course\nAttempting DuckDuckGo search (attempt 1/3)...\nFound 10 results from DuckDuckGo\nAttempting Qwant search (attempt 1/3)...\nNo structured results found, trying generic link extraction...\nFound 4 results from Qwant\nAttempting Google search (attempt 1/3)...\nNo structured results found, trying generic link extraction...\nNo results extracted from Google\nRetrying in 2 seconds...\nAttempting Google search (attempt 2/3)...\nNo structured results found, trying generic link extraction...\nNo results extracted from Google\nRetrying in 4 seconds...\nAttempting Google search (attempt 3/3)...\nNo structured results found, trying generic link extraction...\nNo results extracted from Google\nSearching for: Free and Paid  certification online training\nAttempting DuckDuckGo search (attempt 1/3)...\nFound 10 results from DuckDuckGo\nSearching for: Free and Paid  certification program\nSummarization attempt 1 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 2 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization Error: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 1 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 2 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization Error: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 1 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 2 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization Error: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 1 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 2 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization Error: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 1 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 2 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization Error: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 1 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 2 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization Error: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 1 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 2 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization Error: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 1 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 2 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization Error: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 1 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 2 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization Error: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 1 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 2 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization Error: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 1 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization attempt 2 failed: 429 Resource has been exhausted (e.g. check quota).\nSummarization Error: 429 Resource has been exhausted (e.g. check quota).\n\n✅ Found 17 certification results:\n\nRESULTS PREVIEW:\n--------------------------------------------------------------------------------\n1. Online courses with Free Certificates - Class Central [Other]\n   Summary: Free certificates from top universities & companies (Google, MS). 40% off Coursera Plus. 13514 free courses w/ certificates. Beginner to intermediate ...\n   Link: https://www.classcentral.com/collection/free-certificates\n--------------------------------------------------------------------------------\n2. Best Free Courses & Certificates [2025] - Coursera Learn Online [Other]\n   Summary: Match AI courses to your skill level, goals, & interests. Check content, instructors, & reviews for quality.  Free courses available.\n\n   Link: https://www.coursera.org/courses?query=free\n--------------------------------------------------------------------------------\n3. [2025] Massive List of Thousands of Free Certificates and Badges [Other]\n   Summary: Free AI/CS/tech certs: Google (1000+), LinkedIn (460+ hrs), Harvard (10 CS), Stanford (200+ medical).\n\n   Link: https://www.classcentral.com/report/free-certificates/\n--------------------------------------------------------------------------------\n4. The Top 25 Free Accredited Online Courses With Certificates [Other]\n   Summary: Thiscourseoffers flexible deadlines and self-paced learning for busy students. Learning materials are available 100% online. A shareable,freecertifica...\n   Link: https://www.accredited-online-college.org/the-top-25-accredited-free-classes-available-online/\n--------------------------------------------------------------------------------\n5. 60 Best FREE Online Courses with Certificates (2025) - Guru99 [Other]\n   Summary: BestFREEOnlineCertificationCourseProviders. Following is a handpicked list of the bestfreeonlinecourseproviders, with their popular features and websi...\n   Link: https://www.guru99.com/free-online-course-with-certificate.html\n--------------------------------------------------------------------------------\n\n 🧠 AI-Powered Insights:\nInsight generation attempt 1 failed: 429 Resource has been exhausted (e.g. check quota).\nInsight generation attempt 2 failed: 429 Resource has been exhausted (e.g. check quota).\nHere are some key insights from the AI certification results:\n\n1. **Emphasis on Free and Accessible Training:**  A significant trend is the abundance of free online courses and certifications, often from reputable institutions like Google, Microsoft, and IBM. This democratizes access to AI education, targeting a broad audience from beginners to those seeking career advancement.\n\n2. **Variety in Course Depth and Focus:**  While some offerings focus on foundational skills suitable for beginners, others offer specialized training in areas like data science.  This caters to diverse learning needs and career goals.  Short, \"finish-in-a-day\" courses also address the needs of busy individuals.\n\n3. **Questionable Value of Some \"Free\" Certifications:**  While many free certifications can enhance a resume, the results also highlight the need for discernment.  Generalized \"free certificate\" lists may include low-value offerings that lack industry recognition.  Learners should prioritize certifications from established institutions related to specific skills.\n\n4. **Marketing Noise Requires Filtering:** Several entries are ads or generic course aggregators, not specific AI certifications.  This necessitates careful evaluation of the actual content and issuer of any certification.\n\n5. **Focus on Practical Skills and Career Advancement:**  Many courses emphasize practical skills development directly applicable to job roles, highlighting the connection between AI training and career progression. This caters to learners seeking immediate career benefits from their training.\n\n\n 💾 Results saved to: Free_and_Paid__ai_certifications.csv\n","output_type":"stream"}],"execution_count":26}]}