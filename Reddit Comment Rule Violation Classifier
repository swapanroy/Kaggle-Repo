{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":94635,"databundleVersionId":13121456,"isSourceIdPinned":false,"sourceType":"competition"},{"sourceId":282742,"sourceType":"modelInstanceVersion","isSourceIdPinned":false,"modelInstanceId":239467,"modelId":222398}],"dockerImageVersionId":31090,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/swapanroy/reddit-comment-rule-violation-classifier?scriptVersionId=263608167\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"## Reddit Comment Rule Violation Classifier","metadata":{}},{"cell_type":"code","source":"import kagglehub\nimport more_itertools\nimport pandas as pd\nimport torch\nfrom transformers import AutoTokenizer, AutoModelForCausalLM","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-23T19:36:35.720194Z","iopub.execute_input":"2025-09-23T19:36:35.721035Z","iopub.status.idle":"2025-09-23T19:36:35.725002Z","shell.execute_reply.started":"2025-09-23T19:36:35.721008Z","shell.execute_reply":"2025-09-23T19:36:35.724119Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Download and load model/tokenizer","metadata":{}},{"cell_type":"code","source":"GEMMA_PATH = kagglehub.model_download(\"google/gemma-3/transformers/gemma-3-1b-it\")\nprocessor = AutoTokenizer.from_pretrained(GEMMA_PATH)\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nmodel = AutoModelForCausalLM.from_pretrained(GEMMA_PATH).to(device)\nprint(model)\nmodel.eval()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T19:36:35.726227Z","iopub.execute_input":"2025-09-23T19:36:35.726433Z","iopub.status.idle":"2025-09-23T19:36:40.768096Z","shell.execute_reply.started":"2025-09-23T19:36:35.726417Z","shell.execute_reply":"2025-09-23T19:36:40.767283Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Load TEST Data","metadata":{}},{"cell_type":"code","source":"test_data = pd.read_csv('/kaggle/input/jigsaw-agile-community-rules/test.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T19:36:40.769456Z","iopub.execute_input":"2025-09-23T19:36:40.769695Z","iopub.status.idle":"2025-09-23T19:36:40.776211Z","shell.execute_reply.started":"2025-09-23T19:36:40.769679Z","shell.execute_reply":"2025-09-23T19:36:40.775404Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T19:36:40.777102Z","iopub.execute_input":"2025-09-23T19:36:40.777339Z","iopub.status.idle":"2025-09-23T19:36:40.794053Z","shell.execute_reply.started":"2025-09-23T19:36:40.777318Z","shell.execute_reply":"2025-09-23T19:36:40.793386Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Prompt Building / Few shot learning ","metadata":{}},{"cell_type":"code","source":"def prompt(input: pd.Series):\n    return \"\"\"<start_of_turn>user\nYou are a really experienced supervisor and software developer for the subreddit /r/{sub}. Your job\nis to determine if the following reported comments violates the rule:\n{rule}\n\n{pos1}\nDecision: True\n\n{neg1}\nDecision: False\n\n{neg2}\nDecision: False\n\n{pos2}\nDecision: True\n\n{body}\n<end_of_turn>\n<start_of_turn>model\n\"\"\".format(\n        sub=input['subreddit'],\n        rule=input['rule'],\n        pos1=\"\\n\".join([\"| \" + x for x in input['positive_example_1'].split('\\n')]),\n        neg1=\"\\n\".join([\"| \" + x for x in input['negative_example_1'].split('\\n')]),\n        neg2=\"\\n\".join([\"| \" + x for x in input['negative_example_2'].split('\\n')]),\n        pos2=\"\\n\".join([\"| \" + x for x in input['positive_example_2'].split('\\n')]),\n        body=\"\\n\".join([\"| \" + x for x in input['body'].split('\\n')])\n    )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T19:36:40.795452Z","iopub.execute_input":"2025-09-23T19:36:40.795992Z","iopub.status.idle":"2025-09-23T19:36:40.810124Z","shell.execute_reply.started":"2025-09-23T19:36:40.795949Z","shell.execute_reply":"2025-09-23T19:36:40.809562Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Ensure True/False exist in tokenizer vocab","metadata":{}},{"cell_type":"code","source":"token_ids = processor.convert_tokens_to_ids(['True', 'False'])\nif any(tid == processor.unk_token_id for tid in token_ids):\n    raise ValueError(\"One of the target classes (True/False) is missing from the vocabulary.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T19:36:40.810761Z","iopub.execute_input":"2025-09-23T19:36:40.810967Z","iopub.status.idle":"2025-09-23T19:36:40.82726Z","shell.execute_reply.started":"2025-09-23T19:36:40.810944Z","shell.execute_reply":"2025-09-23T19:36:40.826568Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Prediction","metadata":{}},{"cell_type":"code","source":"responses = []\n\n# Batch prediction\nfor batch in more_itertools.batched(test_data.iterrows(), 4):\n    prompts = [prompt(x) for _, x in batch]\n    inputs = processor(\n        text=prompts,\n        return_tensors=\"pt\",\n        padding=True,\n        truncation=True,\n        max_length=512\n    ).to(device)\n\n    with torch.no_grad():\n        outputs = model(**inputs)\n\n    # Extract logits for the next predicted token\n    logits = outputs.logits[:, -1, token_ids]\n    probs = torch.softmax(logits, dim=-1)\n\n    # Store probability of \"True\"\n    responses.extend(probs[:, 0].tolist())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T19:36:40.827905Z","iopub.execute_input":"2025-09-23T19:36:40.828149Z","iopub.status.idle":"2025-09-23T19:36:42.140085Z","shell.execute_reply.started":"2025-09-23T19:36:40.828126Z","shell.execute_reply":"2025-09-23T19:36:42.139531Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Submission ","metadata":{}},{"cell_type":"code","source":"my_submission = pd.DataFrame({\n    'row_id': test_data['row_id'].iloc[:len(responses)],\n    'rule_violation': responses\n})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T19:36:42.14091Z","iopub.execute_input":"2025-09-23T19:36:42.141149Z","iopub.status.idle":"2025-09-23T19:36:42.145329Z","shell.execute_reply.started":"2025-09-23T19:36:42.141132Z","shell.execute_reply":"2025-09-23T19:36:42.144759Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"my_submission.to_csv(\"submission.csv\", index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T19:36:55.480259Z","iopub.execute_input":"2025-09-23T19:36:55.480561Z","iopub.status.idle":"2025-09-23T19:36:55.485685Z","shell.execute_reply.started":"2025-09-23T19:36:55.48054Z","shell.execute_reply":"2025-09-23T19:36:55.484934Z"}},"outputs":[],"execution_count":null}]}