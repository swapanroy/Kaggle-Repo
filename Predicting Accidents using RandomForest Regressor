{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/swapanroy/predicting-accidents-using-randomforest-regressor?scriptVersionId=267171028\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"f0532dd5","metadata":{"execution":{"iopub.execute_input":"2025-10-11T03:03:54.478338Z","iopub.status.busy":"2025-10-11T03:03:54.477939Z","iopub.status.idle":"2025-10-11T03:03:58.393083Z","shell.execute_reply":"2025-10-11T03:03:58.392047Z"},"papermill":{"duration":3.922333,"end_time":"2025-10-11T03:03:58.394888","exception":false,"start_time":"2025-10-11T03:03:54.472555","status":"completed"},"tags":[]},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","from sklearn.ensemble import RandomForestRegressor\n","import matplotlib.pyplot as plt"]},{"cell_type":"markdown","id":"0dce92d6","metadata":{"papermill":{"duration":0.002557,"end_time":"2025-10-11T03:03:58.400802","exception":false,"start_time":"2025-10-11T03:03:58.398245","status":"completed"},"tags":[]},"source":["## 1. Load Data"]},{"cell_type":"code","execution_count":2,"id":"5973197d","metadata":{"execution":{"iopub.execute_input":"2025-10-11T03:03:58.408072Z","iopub.status.busy":"2025-10-11T03:03:58.407592Z","iopub.status.idle":"2025-10-11T03:03:59.891063Z","shell.execute_reply":"2025-10-11T03:03:59.889908Z"},"papermill":{"duration":1.489387,"end_time":"2025-10-11T03:03:59.893135","exception":false,"start_time":"2025-10-11T03:03:58.403748","status":"completed"},"tags":[]},"outputs":[],"source":["train_df = pd.read_csv(\"/kaggle/input/playground-series-s5e10/train.csv\")\n","test_df = pd.read_csv(\"/kaggle/input/playground-series-s5e10/test.csv\")"]},{"cell_type":"code","execution_count":3,"id":"c0fe9ad1","metadata":{"execution":{"iopub.execute_input":"2025-10-11T03:03:59.901587Z","iopub.status.busy":"2025-10-11T03:03:59.901261Z","iopub.status.idle":"2025-10-11T03:04:00.137739Z","shell.execute_reply":"2025-10-11T03:04:00.13646Z"},"papermill":{"duration":0.243197,"end_time":"2025-10-11T03:04:00.139611","exception":false,"start_time":"2025-10-11T03:03:59.896414","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 517754 entries, 0 to 517753\n","Data columns (total 14 columns):\n"," #   Column                  Non-Null Count   Dtype  \n","---  ------                  --------------   -----  \n"," 0   id                      517754 non-null  int64  \n"," 1   road_type               517754 non-null  object \n"," 2   num_lanes               517754 non-null  int64  \n"," 3   curvature               517754 non-null  float64\n"," 4   speed_limit             517754 non-null  int64  \n"," 5   lighting                517754 non-null  object \n"," 6   weather                 517754 non-null  object \n"," 7   road_signs_present      517754 non-null  bool   \n"," 8   public_road             517754 non-null  bool   \n"," 9   time_of_day             517754 non-null  object \n"," 10  holiday                 517754 non-null  bool   \n"," 11  school_season           517754 non-null  bool   \n"," 12  num_reported_accidents  517754 non-null  int64  \n"," 13  accident_risk           517754 non-null  float64\n","dtypes: bool(4), float64(2), int64(4), object(4)\n","memory usage: 41.5+ MB\n"]}],"source":["train_df.info()"]},{"cell_type":"code","execution_count":4,"id":"e0ca1e15","metadata":{"execution":{"iopub.execute_input":"2025-10-11T03:04:00.147432Z","iopub.status.busy":"2025-10-11T03:04:00.147089Z","iopub.status.idle":"2025-10-11T03:04:00.179983Z","shell.execute_reply":"2025-10-11T03:04:00.17856Z"},"papermill":{"duration":0.03864,"end_time":"2025-10-11T03:04:00.181687","exception":false,"start_time":"2025-10-11T03:04:00.143047","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>road_type</th>\n","      <th>num_lanes</th>\n","      <th>curvature</th>\n","      <th>speed_limit</th>\n","      <th>lighting</th>\n","      <th>weather</th>\n","      <th>road_signs_present</th>\n","      <th>public_road</th>\n","      <th>time_of_day</th>\n","      <th>holiday</th>\n","      <th>school_season</th>\n","      <th>num_reported_accidents</th>\n","      <th>accident_risk</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>urban</td>\n","      <td>2</td>\n","      <td>0.06</td>\n","      <td>35</td>\n","      <td>daylight</td>\n","      <td>rainy</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>afternoon</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>1</td>\n","      <td>0.13</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>urban</td>\n","      <td>4</td>\n","      <td>0.99</td>\n","      <td>35</td>\n","      <td>daylight</td>\n","      <td>clear</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>evening</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>0</td>\n","      <td>0.35</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>rural</td>\n","      <td>4</td>\n","      <td>0.63</td>\n","      <td>70</td>\n","      <td>dim</td>\n","      <td>clear</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>morning</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>2</td>\n","      <td>0.30</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>highway</td>\n","      <td>4</td>\n","      <td>0.07</td>\n","      <td>35</td>\n","      <td>dim</td>\n","      <td>rainy</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>morning</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>1</td>\n","      <td>0.21</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>rural</td>\n","      <td>1</td>\n","      <td>0.58</td>\n","      <td>60</td>\n","      <td>daylight</td>\n","      <td>foggy</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>evening</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>1</td>\n","      <td>0.56</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>517749</th>\n","      <td>517749</td>\n","      <td>highway</td>\n","      <td>4</td>\n","      <td>0.10</td>\n","      <td>70</td>\n","      <td>daylight</td>\n","      <td>foggy</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>afternoon</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>2</td>\n","      <td>0.32</td>\n","    </tr>\n","    <tr>\n","      <th>517750</th>\n","      <td>517750</td>\n","      <td>rural</td>\n","      <td>4</td>\n","      <td>0.47</td>\n","      <td>35</td>\n","      <td>daylight</td>\n","      <td>rainy</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>morning</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>1</td>\n","      <td>0.26</td>\n","    </tr>\n","    <tr>\n","      <th>517751</th>\n","      <td>517751</td>\n","      <td>urban</td>\n","      <td>4</td>\n","      <td>0.62</td>\n","      <td>25</td>\n","      <td>daylight</td>\n","      <td>foggy</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>afternoon</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>0</td>\n","      <td>0.19</td>\n","    </tr>\n","    <tr>\n","      <th>517752</th>\n","      <td>517752</td>\n","      <td>highway</td>\n","      <td>3</td>\n","      <td>0.63</td>\n","      <td>25</td>\n","      <td>night</td>\n","      <td>clear</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>afternoon</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>3</td>\n","      <td>0.51</td>\n","    </tr>\n","    <tr>\n","      <th>517753</th>\n","      <td>517753</td>\n","      <td>highway</td>\n","      <td>2</td>\n","      <td>0.31</td>\n","      <td>45</td>\n","      <td>dim</td>\n","      <td>rainy</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>afternoon</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>2</td>\n","      <td>0.22</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>517754 rows Ã— 14 columns</p>\n","</div>"],"text/plain":["            id road_type  num_lanes  curvature  speed_limit  lighting weather  \\\n","0            0     urban          2       0.06           35  daylight   rainy   \n","1            1     urban          4       0.99           35  daylight   clear   \n","2            2     rural          4       0.63           70       dim   clear   \n","3            3   highway          4       0.07           35       dim   rainy   \n","4            4     rural          1       0.58           60  daylight   foggy   \n","...        ...       ...        ...        ...          ...       ...     ...   \n","517749  517749   highway          4       0.10           70  daylight   foggy   \n","517750  517750     rural          4       0.47           35  daylight   rainy   \n","517751  517751     urban          4       0.62           25  daylight   foggy   \n","517752  517752   highway          3       0.63           25     night   clear   \n","517753  517753   highway          2       0.31           45       dim   rainy   \n","\n","        road_signs_present  public_road time_of_day  holiday  school_season  \\\n","0                    False         True   afternoon    False           True   \n","1                     True        False     evening     True           True   \n","2                    False         True     morning     True          False   \n","3                     True         True     morning    False          False   \n","4                    False        False     evening     True          False   \n","...                    ...          ...         ...      ...            ...   \n","517749                True         True   afternoon    False          False   \n","517750                True         True     morning    False          False   \n","517751               False        False   afternoon    False           True   \n","517752                True        False   afternoon     True           True   \n","517753               False         True   afternoon     True           True   \n","\n","        num_reported_accidents  accident_risk  \n","0                            1           0.13  \n","1                            0           0.35  \n","2                            2           0.30  \n","3                            1           0.21  \n","4                            1           0.56  \n","...                        ...            ...  \n","517749                       2           0.32  \n","517750                       1           0.26  \n","517751                       0           0.19  \n","517752                       3           0.51  \n","517753                       2           0.22  \n","\n","[517754 rows x 14 columns]"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["train_df"]},{"cell_type":"code","execution_count":5,"id":"bde89e84","metadata":{"execution":{"iopub.execute_input":"2025-10-11T03:04:00.190802Z","iopub.status.busy":"2025-10-11T03:04:00.189662Z","iopub.status.idle":"2025-10-11T03:04:00.23869Z","shell.execute_reply":"2025-10-11T03:04:00.237404Z"},"papermill":{"duration":0.05524,"end_time":"2025-10-11T03:04:00.240544","exception":false,"start_time":"2025-10-11T03:04:00.185304","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 172585 entries, 0 to 172584\n","Data columns (total 13 columns):\n"," #   Column                  Non-Null Count   Dtype  \n","---  ------                  --------------   -----  \n"," 0   id                      172585 non-null  int64  \n"," 1   road_type               172585 non-null  object \n"," 2   num_lanes               172585 non-null  int64  \n"," 3   curvature               172585 non-null  float64\n"," 4   speed_limit             172585 non-null  int64  \n"," 5   lighting                172585 non-null  object \n"," 6   weather                 172585 non-null  object \n"," 7   road_signs_present      172585 non-null  bool   \n"," 8   public_road             172585 non-null  bool   \n"," 9   time_of_day             172585 non-null  object \n"," 10  holiday                 172585 non-null  bool   \n"," 11  school_season           172585 non-null  bool   \n"," 12  num_reported_accidents  172585 non-null  int64  \n","dtypes: bool(4), float64(1), int64(4), object(4)\n","memory usage: 12.5+ MB\n"]}],"source":["test_df.info()"]},{"cell_type":"markdown","id":"da269ad6","metadata":{"papermill":{"duration":0.003082,"end_time":"2025-10-11T03:04:00.247163","exception":false,"start_time":"2025-10-11T03:04:00.244081","status":"completed"},"tags":[]},"source":["\n","## 2. Separate Target and IDs"]},{"cell_type":"code","execution_count":6,"id":"625374c8","metadata":{"execution":{"iopub.execute_input":"2025-10-11T03:04:00.25499Z","iopub.status.busy":"2025-10-11T03:04:00.254664Z","iopub.status.idle":"2025-10-11T03:04:00.287767Z","shell.execute_reply":"2025-10-11T03:04:00.286852Z"},"papermill":{"duration":0.039013,"end_time":"2025-10-11T03:04:00.289425","exception":false,"start_time":"2025-10-11T03:04:00.250412","status":"completed"},"tags":[]},"outputs":[],"source":["target = train_df['accident_risk']\n","test_ids = test_df['id']\n","\n","# Drop 'id' and 'accident_risk' from the training set\n","train_df = train_df.drop(columns=['id', 'accident_risk'])\n","test_df = test_df.drop(columns=['id'])"]},{"cell_type":"markdown","id":"9b42cd2a","metadata":{"papermill":{"duration":0.003122,"end_time":"2025-10-11T03:04:00.296044","exception":false,"start_time":"2025-10-11T03:04:00.292922","status":"completed"},"tags":[]},"source":["\n","## 3. Feature Engineering "]},{"cell_type":"code","execution_count":7,"id":"840ceab4","metadata":{"execution":{"iopub.execute_input":"2025-10-11T03:04:00.304147Z","iopub.status.busy":"2025-10-11T03:04:00.303755Z","iopub.status.idle":"2025-10-11T03:04:00.837782Z","shell.execute_reply":"2025-10-11T03:04:00.836887Z"},"papermill":{"duration":0.540111,"end_time":"2025-10-11T03:04:00.83946","exception":false,"start_time":"2025-10-11T03:04:00.299349","status":"completed"},"tags":[]},"outputs":[],"source":["# Concatenate train and test data for consistent encoding\n","combined_df = pd.concat([train_df, test_df], ignore_index=True)\n","\n","# Identify boolean and object columns\n","bool_cols = combined_df.select_dtypes(include=['bool']).columns\n","object_cols = combined_df.select_dtypes(include=['object']).columns\n","\n","# Convert boolean columns to integer 0/1\n","for col in bool_cols:\n","    combined_df[col] = combined_df[col].astype(int)\n","\n","# One-Hot Encoding for object type columns\n","# This handles 'road_type', 'lighting', 'weather', and 'time_of_day'\n","combined_df = pd.get_dummies(combined_df, columns=object_cols, drop_first=True)\n","\n","# Separate the combined data back into training and testing sets\n","X_train = combined_df.iloc[:len(train_df)]\n","X_test = combined_df.iloc[len(train_df):]\n","y_train = target"]},{"cell_type":"markdown","id":"8d7cc2b7","metadata":{"papermill":{"duration":0.003003,"end_time":"2025-10-11T03:04:00.845963","exception":false,"start_time":"2025-10-11T03:04:00.84296","status":"completed"},"tags":[]},"source":["## 4. Model Training (RandomForestRegressor)"]},{"cell_type":"code","execution_count":8,"id":"365cf340","metadata":{"execution":{"iopub.execute_input":"2025-10-11T03:04:00.853378Z","iopub.status.busy":"2025-10-11T03:04:00.853009Z","iopub.status.idle":"2025-10-11T03:04:30.134401Z","shell.execute_reply":"2025-10-11T03:04:30.133172Z"},"papermill":{"duration":29.28688,"end_time":"2025-10-11T03:04:30.135887","exception":false,"start_time":"2025-10-11T03:04:00.849007","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Starting model training (RandomForestRegressor)...\n","Model training complete.\n"]}],"source":["# Using a modest set of hyper-parameters for efficiency on a large dataset\n","rfr = RandomForestRegressor(\n","    n_estimators=100,      # Number of trees\n","    max_depth=10,          # Limiting depth to speed up training and reduce overfitting\n","    min_samples_split=20,  # Minimum samples required to split an internal node\n","    random_state=42,       # For reproducibility\n","    n_jobs=-1,              # Use all avail    \n","    #min_samples_leaf=8,     # Additional regularization\n","    max_features=0.5      # Feature subsampling\n","    \n",")\n","\n","print(\"Starting model training (RandomForestRegressor)...\")\n","rfr.fit(X_train, y_train)\n","print(\"Model training complete.\")"]},{"cell_type":"markdown","id":"9f914a29","metadata":{"papermill":{"duration":0.003253,"end_time":"2025-10-11T03:04:30.142806","exception":false,"start_time":"2025-10-11T03:04:30.139553","status":"completed"},"tags":[]},"source":["## 5. Prediction and Submission File Generation"]},{"cell_type":"code","execution_count":9,"id":"7e1bfbe9","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2025-10-11T03:04:30.150623Z","iopub.status.busy":"2025-10-11T03:04:30.150306Z","iopub.status.idle":"2025-10-11T03:04:31.24001Z","shell.execute_reply":"2025-10-11T03:04:31.238895Z"},"papermill":{"duration":1.095732,"end_time":"2025-10-11T03:04:31.241798","exception":false,"start_time":"2025-10-11T03:04:30.146066","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","Submission file 'submission.csv' created.\n","       id  accident_risk\n","0  517754       0.296580\n","1  517755       0.127043\n","2  517756       0.189052\n","3  517757       0.325238\n","4  517758       0.422255\n"]}],"source":["# Generate predictions on the test set\n","predictions = rfr.predict(X_test)\n","\n","# Ensure predictions are between 0 and 1\n","predictions = np.clip(predictions, 0, 1)\n","\n","# Create the submission \n","submission_df = pd.DataFrame({\n","    'id': test_ids,\n","    'accident_risk': predictions\n","})\n","\n","# Save the submission file\n","submission_df.to_csv('submission.csv', index=False)\n","\n","print(\"\\nSubmission file 'submission.csv' created.\")\n","print(submission_df.head())"]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"databundleVersionId":13760552,"sourceId":91721,"sourceType":"competition"}],"dockerImageVersionId":31153,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.13"},"papermill":{"default_parameters":{},"duration":42.202156,"end_time":"2025-10-11T03:04:31.966216","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-10-11T03:03:49.76406","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}